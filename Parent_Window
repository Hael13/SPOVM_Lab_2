#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <Windows.h>
#include <time.h>
#include <vector>
#include <conio.h>
using namespace std;

HANDLE AddProcess(string event_name)
{
	STARTUPINFO start{ 0 };
	PROCESS_INFORMATION info{ 0 };
	SECURITY_ATTRIBUTES s = { sizeof(SECURITY_ATTRIBUTES), NULL, TRUE };
	string str1, str2;
	str1 = "SPOVM_Lab_2_child.exe ";
	cout << "Insert string: ";
	getline(cin, str2, '\n');
	str1 = str1 + "\"" + str2 + "\" " + event_name;
	if (!CreateProcess(NULL, const_cast<char*>(str1.c_str()), &s, NULL, TRUE, 0, NULL, NULL, &start, &info))
	{
		cout << "Process isn't created" << endl;
		system("pause");
		exit(0);
	}
	return info.hProcess;
}

void RemoveProcess(vector<HANDLE>& lst, vector<HANDLE>& events)
{
	TerminateProcess(lst[lst.size() - 1], 1);
	lst.pop_back();
	events.pop_back();
}

int main()
{
	bool fl = true;
	vector<HANDLE> processes;
	vector<HANDLE> events;
	string name;
	SECURITY_ATTRIBUTES s = { sizeof(SECURITY_ATTRIBUTES), NULL, TRUE };
	HANDLE common = CreateEvent(&s, TRUE, TRUE, "common");
	char ch;
	int event_name = 0, i = 0;
	while (fl)
	{
		if (_kbhit())
		{
			ch = _getch();
			cout << ch << endl;
		}
		else
			ch = -1;
		switch (ch)
		{
		case '+':
			name=std::to_string(event_name++);
			Sleep(1000);
			events.push_back(CreateEvent(&s, TRUE, TRUE, const_cast<char*>(name.c_str())));
			processes.push_back(AddProcess(name));
			break;
		case '-':
			RemoveProcess(processes, events);
			SetEvent(common);
			break;
		case 'q':
			while (!processes.empty())
				RemoveProcess(processes, events);
			fl = false;
			SetEvent(common);
			break;
		default:
			WaitForSingleObject(common, INFINITE);
			ResetEvent(common);
			if(i<events.size())
				SetEvent(events[i++]);
			else
			{
				i = 0;
				SetEvent(common);
			}
			break;
		}
	}
	return 0;
}

